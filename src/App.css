import React, { useState, useEffect, useCallback } from 'react';
import { initializeApp } from 'firebase/app';
import { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged } from 'firebase/auth';
import { getFirestore } from 'firebase/firestore';
import { Menu, X, User, Briefcase, Code, Image, Mail } from 'lucide-react'; // Menggunakan lucide-react untuk ikon

// Global variables provided by the Canvas environment
const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : {};
const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;
const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';

// --- CSS YANG ANDA BERIKAN, DIKEMAS DALAM STRING UNTUK INJEKSI ---
const globalStyles = `
html, #root {
    height: 100%;
}

body {
    margin: 0;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    background: linear-gradient(-45deg, #121212, #1a1a2e, #16213e, #0f3460);
    background-size: 400% 400%;
    animation: gradientMove 15s ease infinite;
    color: #e0e0e0;
    min-height: 100vh;
}

@keyframes gradientMove {
    0% { background-position: 0% 50%; }
    50% { background-position: 100% 50%; }
    100% { background-position: 0% 50%; }
}

.app-frame {
    max-width: 1000px;
    margin: 40px auto;
    padding: 30px;
    background-color: rgba(30, 30, 30, 0.9);
    border-radius: 12px;
    box-shadow: 0 6px 20px rgba(0, 191, 255, 0.2);
    position: relative;
    /* min-height: 600px; - Dihapus sesuai saran terakhir */
}

.page-title {
    font-size: 28px;
    color: #00bfff;
    border-bottom: 2px solid #00bfff;
    padding-bottom: 6px;
    margin-bottom: 20px;
    letter-spacing: 1px;
    text-shadow: 0 0 8px #00bfff;
}

.menu-wrapper {
    position: fixed;
    top: 20px;
    right: 30px;
    z-index: 999;
    white-space: nowrap; 
}

.menu-toggle {
    background-color: #00bfff;
    color: white;
    border: none;
    font-size: 20px;
    padding: 8px 12px;
    border-radius: 6px;
    cursor: pointer;
    transition: background 0.3s, transform 0.3s;
}

.menu-toggle:hover {
    background-color: #008fcc;
}

.top-menu {
    margin-top: 10px;
    display: flex;
    flex-direction: column;
    gap: 10px;
    background-color: #1e1e1e;
    padding: 15px;
    border-radius: 8px;
    box-shadow: 0 4px 12px rgba(0, 191, 255, 0.2);
}

.top-menu a {
    color: #00bfff;
    text-decoration: none;
    font-weight: 600;
    padding: 6px 12px;
    border-radius: 6px;
    transition: background-color 0.3s ease, transform 0.2s;
}

.top-menu a:hover {
    background-color: #004f7f;
    color: #cceeff;
    transform: translateX(5px);
}

.top-section {
    display: flex;
    gap: 30px;
    margin-bottom: 30px;
    align-items: flex-start;
}

.photo-section img {
    width: 200px;
    height: 320px;
    object-fit: cover;
    border-radius: 10px;
    border: 2px solid #00bfff;
    box-shadow: 0 4px 12px rgb(0, 191, 255);
}

.about-section {
    flex: 1;
    background-color: #222;
    padding: 20px;
    border-radius: 12px;
    box-shadow: 0 4px 12px rgb(0, 191, 255);
}

.about-section h2 {
    margin-top: 0;
    color: #00bfff;
    margin-bottom: 12px;
}

.about-section p {
    font-size: 16px;
    line-height: 1.6;
    margin-bottom: 6px;
    color: #ccc;
}

.introduction-section {
    margin-top: 20px;
    background-color: #222;
    padding: 20px;
    border-radius: 12px;
    box-shadow: 0 4px 12px rgb(0, 191, 255);
}

.skills-section h2 {
    color: #00bfff;
    margin-bottom: 12px;
}

.skill {
    margin-bottom: 12px;
}

.skill span {
    display: block;
    margin-bottom: 4px;
}

.progress-bar {
    background-color: #333;
    border-radius: 6px;
    overflow: hidden;
    height: 16px;
}

.progress-bar div {
    height: 100%;
    background-color: #00bfff;
}

.hobbies-section {
    margin-top: 30px;
}

.hobbies-section h2 {
    color: #00bfff;
    margin-bottom: 12px;
}

.hobby-list {
    display: flex;
    flex-wrap: wrap;
    gap: 20px;
}

.hobby {
    background-color: #222;
    padding: 8px 12px;
    border-radius: 8px;
    box-shadow: 0 2px 6px rgb(0, 191, 255);
    transition: transform 0.3s;
}

.timeline-section {
    margin-top: 20px;
}

.timeline-section h2 {
    color: #00bfff;
    margin-bottom: 12px;
}

.timeline {
    list-style: none;
    padding-left: 0;
}

.timeline li {
    margin-bottom: 10px;
    background-color: #222;
    padding: 10px 15px;
    border-left: 6px solid #00bfff;
    border-radius: 6px;
    box-shadow: 0 2px 6px rgb(0, 191, 255);
}

.timeline li span {
    font-weight: 600;
    color: #00bfff;
}

.quote-section {
    margin-top: 20px;
    background-color: #222;
    padding: 20px;
    border-left: 6px solid #00bfff;
    border-radius: 8px;
    font-style: italic;
}

.content {
    padding: 20px;
    animation: fadeIn 0.6s ease;
}

@keyframes fadeIn {
    from { opacity: 0; transform: translateY(20px);}
    to { opacity: 1; transform: translateY(0);}
}

.contact-section h2 {
    color: #00bfff;
    margin-bottom: 12px;
}

.contact-list {
    list-style: none;
    padding-left: 0;
}

.contact-item {
    margin-bottom: 10px;
    background-color: #222;
    padding: 10px 15px;
    border-left: 6px solid #00bfff;
    border-radius: 6px;
    box-shadow: 0 2px 6px rgb(0, 191, 255);
    transition: transform 0.3s;
}

.contact-item a {
    text-decoration: none;
    color: #ccc;
    display: flex;
    align-items: center;
    gap: 15px;
}

.contact-icon {
    font-size: 20px;
    color: #00bfff;
}

.contact-name {
    font-weight: 600;
}

.contact-form {
    margin-top: 15px;
}

.contact-form input,
.contact-form textarea {
    width: 100%;
    padding: 12px;
    margin-bottom: 15px;
    border: 1px solid #00bfff;
    background-color: #1a1a1a;
    color: #e0e0e0;
    border-radius: 6px;
    box-sizing: border-box;
    font-family: inherit;
    font-size: 16px;
    transition: border-color 0.3s;
}

.contact-form input:focus,
.contact-form textarea:focus {
    border-color: #00ffff;
    outline: none;
    box-shadow: 0 0 5px #00bfff;
}

.contact-form button {
    background-color: #00bfff;
    color: white;
    padding: 12px 20px;
    border: none;
    border-radius: 6px;
    cursor: pointer;
    font-size: 16px;
    font-weight: bold;
    transition: background-color 0.3s, transform 0.3s;
    width: 100%;
}

.contact-form button:disabled {
    background-color: #333;
    cursor: not-allowed;
}

.contact-form button:hover:not(:disabled) {
    background-color: #008fcc;
}

.status-message {
    margin-top: 15px;
    padding: 10px;
    border-radius: 6px;
    font-weight: bold;
    text-align: center;
}

.status-message.success {
    background-color: #28a745;
    color: white;
}

.status-message.error {
    background-color: #dc3545;
    color: white;
}

.email-note {
    text-align: center;
    margin-top: 15px;
    font-size: 14px;
    color: #aaa;
}

.project-list-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(400px, 1fr)); 
    gap: 25px;
    margin-top: 30px;
}

.project-card {
    background-color: #222;
    padding: 20px;
    border-radius: 12px;
    border: 1px solid #00bfff;
    box-shadow: 0 4px 12px rgba(0, 191, 255, 0.2);
    transition: transform 0.3s, box-shadow 0.3s;
}

.project-card h3 {
    margin-top: 0;
    color: #00bfff;
    font-size: 18px;
    border-bottom: 1px dashed #333;
    padding-bottom: 10px;
}

.project-summary {
    font-size: 14px;
    color: #ccc;
    margin-bottom: 15px;
}

.project-link {
    display: inline-block;
    color: #00ffff;
    text-decoration: none;
    font-weight: 600;
    transition: color 0.3s;
}

.project-link:hover {
    color: #00bfff;
    text-decoration: underline;
}

.detail-projek-page {}

.back-link {
    display: inline-block;
    margin-bottom: 20px;
    color: #00bfff;
    text-decoration: none;
    font-weight: 600;
    padding: 5px 10px;
    background-color: #222;
    border-radius: 6px;
    transition: background-color 0.3s;
}

.back-link:hover {
    background-color: #004f7f;
}

.technical-details {
    margin-top: 25px;
    padding: 15px;
    border-left: 5px solid #00bfff;
    background-color: #1a1a1a;
    border-radius: 8px;
}

.technical-details h3 {
    color: #00bfff;
    margin-top: 0;
}

.technical-details ul {
    list-style-type: none;
    padding-left: 0;
}

.technical-details li {
    margin-bottom: 5px;
    padding-left: 15px;
    position: relative;
}

.technical-details li::before {
    content: "â€¢";
    color: #00ffff;
    font-weight: bold;
    display: inline-block;
    width: 1em;
    margin-left: -1em;
}

.experience-list {
    margin-top: 20px;
    display: flex;
    flex-direction: column;
    gap: 15px;
}

.experience-item {
    background-color: #222;
    padding: 20px;
    border-radius: 12px;
    border-left: 6px solid #00bfff;
    box-shadow: 0 4px 12px rgba(0, 191, 255, 0.2);
    transition: transform 0.3s;
}

.experience-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    border-bottom: 1px dashed #333;
    padding-bottom: 5px;
    margin-bottom: 10px;
}

.experience-item h3 {
    margin: 0;
    color: #00bfff;
    font-size: 18px;
}

.experience-period {
    font-weight: 600;
    color: #00ffff;
    background-color: #004f7f;
    padding: 4px 8px;
    border-radius: 4px;
    font-size: 14px;
}

.experience-org {
    margin: 0 0 10px 0;
    font-size: 14px;
    color: #ccc;
}

.experience-role {
    font-size: 16px;
    color: #e0e0e0;
    margin-bottom: 15px;
}

.detail-organisasi-page {}

.photo-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); 
    gap: 20px;
    margin-top: 30px;
}

.photo-card {
    background-color: #222;
    border-radius: 10px;
    overflow: hidden;
    box-shadow: 0 4px 10px rgba(0, 191, 255, 0.2);
    transition: transform 0.3s, box-shadow 0.3s;
    border: 1px solid #00bfff;
}

.photo-card img {
    width: 100%;
    height: 150px;
    object-fit: cover;
    display: block;
    transition: transform 0.5s;
}

.photo-card:hover img {
    transform: scale(1.1);
}

.photo-description {
    padding: 10px;
    margin: 0;
    font-size: 12px;
    color: #ccc;
    text-align: center;
    border-top: 1px dashed #333;
}
`;
// --- AKHIR DARI CSS ---

const navItems = [
    { id: 'biografi', label: 'Biografi', icon: User },
    { id: 'proyek', label: 'Proyek', icon: Code },
    { id: 'pengalaman', label: 'Pengalaman', icon: Briefcase },
    { id: 'galeri', label: 'Galeri', icon: Image },
    { id: 'kontak', label: 'Kontak', icon: Mail },
];

// --- FUNGSI KOMPONEN UNTUK HALAMAN ---

const BiografiPage = () => (
    <div className="content">
        <h1 className="page-title">Profil Saya: Developer Neon Dream</h1>
        <div className="top-section">
            <div className="photo-section">
                {/* Menggunakan placeholder aman. Ganti dengan gambar Anda. */}
                <img src="https://placehold.co/200x320/00bfff/121212?text=FOTO+ANDA" alt="Foto Profil" onError={(e) => { e.target.onerror = null; e.target.src="https://placehold.co/200x320/00bfff/121212?text=FOTO"; }} />
            </div>
            <div className="about-section">
                <h2>Tentang Saya</h2>
                <p>Halo! Saya adalah seorang Developer Full-Stack dengan semangat untuk menciptakan aplikasi web yang responsif dan estetis. Saya percaya pada perpaduan antara fungsionalitas yang kuat dan desain yang memukau, terutama yang berkonsep *dark theme* dan *neon*.</p>
                <p>Saya berfokus pada ekosistem JavaScript, mulai dari Node.js di sisi *backend* hingga React di *frontend*. Saya juga memiliki minat besar pada *Data Science* dan visualisasi data.</p>
            </div>
        </div>

        <div className="introduction-section">
            <p><strong>Status Auth: User ID: <span id="user-id">Loading...</span></strong> (Ini adalah ID Anda untuk penyimpanan data)</p>
        </div>

        <div className="skills-section introduction-section">
            <h2>Keahlian Teknis</h2>
            <div className="skill">
                <span>React.js / Frontend Development</span>
                <div className="progress-bar"><div style={{ width: '90%' }}></div></div>
            </div>
            <div className="skill">
                <span>Node.js / Express.js (Backend)</span>
                <div className="progress-bar"><div style={{ width: '85%' }}></div></div>
            </div>
            <div className="skill">
                <span>Firestore / NoSQL Databases</span>
                <div className="progress-bar"><div style={{ width: '80%' }}></div></div>
            </div>
            <div className="skill">
                <span>Tailwind CSS / Styling Modern</span>
                <div className="progress-bar"><div style={{ width: '95%' }}></div></div>
            </div>
        </div>

        <div className="timeline-section">
            <h2>Edukasi Singkat</h2>
            <ul className="timeline">
                <li><span>2018 - 2022</span> | Sarjana Teknik Informatika - Universitas Teknologi</li>
                <li><span>2023 - Sekarang</span> | Spesialisasi Pengembangan Aplikasi Cloud - Google Training Program</li>
            </ul>
        </div>
        
        <div className="quote-section">
            "Design is not just what it looks like and feels like. Design is how it works." - Steve Jobs
        </div>
    </div>
);

const ProjectPage = () => (
    <div className="content">
        <h1 className="page-title">Daftar Proyek Unggulan</h1>
        <div className="project-list-grid">
            {[1, 2, 3, 4].map(i => (
                <div className="project-card" key={i}>
                    <h3>Project Neon Chat App #{i}</h3>
                    <p className="project-summary">Aplikasi chat real-time yang menggunakan Firestore dan React, menampilkan UI *neon dark mode* yang memukau.</p>
                    <div className="technical-details">
                        <h3>Teknologi</h3>
                        <ul>
                            <li>React Hooks & Context</li>
                            <li>Firebase Firestore (Realtime)</li>
                            <li>Tailwind CSS</li>
                        </ul>
                    </div>
                </div>
            ))}
        </div>
    </div>
);

const ExperiencePage = () => (
    <div className="content">
        <h1 className="page-title">Pengalaman Kerja & Organisasi</h1>
        <div className="experience-list">
            <div className="experience-item">
                <div className="experience-header">
                    <h3>Senior Full-Stack Developer</h3>
                    <span className="experience-period">2023 - Sekarang</span>
                </div>
                <p className="experience-org">Tech Solutions Global</p>
                <p className="experience-role">Memimpin tim untuk mengembangkan dashboard analitik menggunakan React dan Node.js.</p>
            </div>
            <div className="experience-item">
                <div className="experience-header">
                    <h3>Junior Web Developer</h3>
                    <span className="experience-period">2022 - 2023</span>
                </div>
                <p className="experience-org">Startup Kreatif Indonesia</p>
                <p className="experience-role">Bertanggung jawab atas integrasi API dan maintenance situs e-commerce berbasis PHP dan JavaScript.</p>
            </div>
        </div>
    </div>
);

const GalleryPage = () => (
    <div className="content">
        <h1 className="page-title">Galeri Foto Estetika Neon</h1>
        <div className="photo-grid">
            {[1, 2, 3, 4, 5, 6, 7, 8].map(i => (
                <div className="photo-card" key={i}>
                    <img src={`https://placehold.co/200x150/004f7f/cceeff?text=Foto+${i}`} alt={`Foto ${i}`} />
                    <p className="photo-description">Deskripsi singkat tentang momen ini.</p>
                </div>
            ))}
        </div>
    </div>
);

const ContactPage = () => {
    const [name, setName] = useState('');
    const [email, setEmail] = useState('');
    const [message, setMessage] = useState('');
    const [status, setStatus] = useState('');

    const handleSubmit = (e) => {
        e.preventDefault();
        setStatus('Mengirim...');
        
        // Simulating API call success/failure
        setTimeout(() => {
            if (name && email && message) {
                setStatus('Pesan berhasil dikirim! (Simulasi)');
            } else {
                setStatus('Pesan gagal dikirim. Harap isi semua kolom.');
            }
        }, 1500);
    };

    return (
        <div className="content">
            <h1 className="page-title">Hubungi Saya</h1>
            <div className="contact-section introduction-section">
                <h2>Informasi Kontak</h2>
                <ul className="contact-list">
                    <li className="contact-item">
                        <a href="mailto:contact@devneon.com">
                            <Mail className="contact-icon" size={20} />
                            <span className="contact-name">Email: contact@devneon.com</span>
                        </a>
                    </li>
                    <li className="contact-item">
                        <a href="https://linkedin.com/in/yourprofile">
                            <Briefcase className="contact-icon" size={20} />
                            <span className="contact-name">LinkedIn: /in/yourprofile</span>
                        </a>
                    </li>
                </ul>
            </div>

            <div className="contact-section introduction-section">
                <h2>Kirim Pesan</h2>
                <form className="contact-form" onSubmit={handleSubmit}>
                    <input 
                        type="text" 
                        placeholder="Nama Anda" 
                        value={name} 
                        onChange={(e) => setName(e.target.value)} 
                        required 
                    />
                    <input 
                        type="email" 
                        placeholder="Email Anda" 
                        value={email} 
                        onChange={(e) => setEmail(e.target.value)} 
                        required 
                    />
                    <textarea 
                        placeholder="Pesan Anda" 
                        rows="5" 
                        value={message} 
                        onChange={(e) => setMessage(e.target.value)} 
                        required 
                    ></textarea>
                    <button type="submit" disabled={status === 'Mengirim...'}>
                        {status === 'Mengirim...' ? 'Mengirim...' : 'Kirim Pesan'}
                    </button>
                    {status && status !== 'Mengirim...' && (
                        <div className={`status-message ${status.includes('berhasil') ? 'success' : 'error'}`}>
                            {status}
                        </div>
                    )}
                </form>
                <p className="email-note">
                    *Formulir ini hanya simulasi. Ganti dengan fungsi pengiriman email yang sebenarnya.
                </p>
            </div>
        </div>
    );
};


// --- KOMPONEN UTAMA APLIKASI ---

const App = () => {
    const [activePage, setActivePage] = useState('biografi');
    const [isMenuOpen, setIsMenuOpen] = useState(false);
    const [db, setDb] = useState(null);
    const [auth, setAuth] = useState(null);
    const [userId, setUserId] = useState(null);
    const [isAuthReady, setIsAuthReady] = useState(false);

    // 1. FIREBASE INITIALIZATION AND AUTHENTICATION
    useEffect(() => {
        try {
            const firebaseApp = initializeApp(firebaseConfig);
            const authInstance = getAuth(firebaseApp);
            const dbInstance = getFirestore(firebaseApp);
            
            setDb(dbInstance);
            setAuth(authInstance);

            const unsubscribe = onAuthStateChanged(authInstance, async (user) => {
                if (!user) {
                    if (initialAuthToken) {
                        await signInWithCustomToken(authInstance, initialAuthToken);
                    } else {
                        await signInAnonymously(authInstance);
                    }
                }
                setUserId(authInstance.currentUser?.uid || 'anonymous');
                setIsAuthReady(true);
                console.log(`[Firebase] Auth ready. User ID: ${authInstance.currentUser?.uid || 'anonymous'}`);
            });

            return () => unsubscribe();
        } catch (error) {
            console.error("Failed to initialize Firebase:", error);
            setIsAuthReady(true); // Allow UI to render even if Firebase fails
        }
    }, []);

    useEffect(() => {
        if (isAuthReady && userId) {
            // Update the user ID display element
            const userIdElement = document.getElementById('user-id');
            if (userIdElement) {
                userIdElement.textContent = userId;
            }
        }
    }, [isAuthReady, userId]);

    // Function to render the active page component
    const renderPage = useCallback(() => {
        switch (activePage) {
            case 'biografi':
                return <BiografiPage />;
            case 'proyek':
                return <ProjectPage />;
            case 'pengalaman':
                return <ExperiencePage />;
            case 'galeri':
                return <GalleryPage />;
            case 'kontak':
                return <ContactPage />;
            default:
                return <BiografiPage />;
        }
    }, [activePage]);
    
    // Handler for navigation
    const handleNavigation = (pageId) => {
        setActivePage(pageId);
        setIsMenuOpen(false); // Close menu after navigation
    };

    return (
        <>
            {/* Inject CSS global */}
            <style>{globalStyles}</style>

            <div className="app-frame">
                {renderPage()}
            </div>

            {/* Menu Navigasi (Fixed Position) */}
            <div className="menu-wrapper">
                <button className="menu-toggle" onClick={() => setIsMenuOpen(!isMenuOpen)}>
                    {isMenuOpen ? <X size={24} /> : <Menu size={24} />}
                </button>
                {isMenuOpen && (
                    <div className="top-menu">
                        {navItems.map((item) => (
                            <a 
                                key={item.id}
                                href="#" 
                                onClick={(e) => { e.preventDefault(); handleNavigation(item.id); }}
                                style={{
                                    backgroundColor: activePage === item.id ? '#004f7f' : 'transparent',
                                    color: activePage === item.id ? '#cceeff' : '#00bfff',
                                }}
                            >
                                <item.icon size={16} style={{ marginRight: '8px', verticalAlign: 'middle' }} />
                                {item.label}
                            </a>
                        ))}
                    </div>
                )}
            </div>
        </>
    );
};

export default App;
